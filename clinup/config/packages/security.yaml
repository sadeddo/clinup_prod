security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AuthAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
            entry_point: form_login
            logout:
                path: app_logout
                target: app_login

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/fiscale, roles: ROLE_PRESTATAIRE }
         - { path: ^/modifier/profile, roles: ROLE_PRESTATAIRE }
         - { path: ^/justificatif, roles: ROLE_PRESTATAIRE }
         - { path: ^/experience, roles: ROLE_PRESTATAIRE }
         - { path: ^/evaluation, roles: ROLE_PRESTATAIRE }
         - { path: ^/availabilities, roles: ROLE_PRESTATAIRE }
         - { path: ^/paiement, roles: ROLE_PRESTATAIRE }
         - { path: ^/reservation/prestataire, roles: ROLE_PRESTATAIRE }
         - { path: ^/notif/prestataire, roles: ROLE_PRESTATAIRE }
         - { path: ^/chat, roles: ROLE_PRESTATAIRE }
         - { path: ^/tâches, roles: ROLE_PRESTATAIRE }
         - { path: ^/img, roles: ROLE_PRESTATAIRE }
         - { path: ^/problèmes, roles: ROLE_PRESTATAIRE }
         - { path: ^/profile/modifier, roles: ROLE_HOTE }
         - { path: ^/logement, roles: ROLE_HOTE }
         - { path: ^/tache, roles: ROLE_HOTE }
         - { path: ^/probleme, roles: ROLE_HOTE }
         - { path: ^/reservation/hote, roles: ROLE_HOTE }
         - { path: ^/notif/hote, roles: ROLE_HOTE }
         - { path: ^/comment/presta, roles: ROLE_HOTE }
         - { path: ^/consulterP, roles: ROLE_HOTE }
         - { path: ^/admin, roles: ROLE_ADMIN }
         
         
when@test:
    security:
        
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon


